import json
import os
import webbrowser

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError


class YouTubeTokenSetup:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ OAuth –¥–ª—è YouTube –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ bundle."""

    def __init__(self,
                 bundle_path: str = "config/youtube_creds.json",
                 default_scopes: list[str] | None = None):
        self.bundle_path = bundle_path
        self.default_scopes = default_scopes or [
            'https://www.googleapis.com/auth/youtube.upload',
            'https://www.googleapis.com/auth/youtube.force-ssl',
        ]

    def _load_bundle(self) -> dict:
        if not os.path.exists(self.bundle_path):
            return {}
        try:
            with open(self.bundle_path, encoding='utf-8') as f:
                return json.load(f) or {}
        except Exception:
            return {}

    def _save_bundle(self, bundle: dict) -> None:
        os.makedirs(os.path.dirname(self.bundle_path), exist_ok=True)
        with open(self.bundle_path, 'w', encoding='utf-8') as f:
            json.dump(bundle, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.bundle_path}")

    def _ensure_client_secrets(self, bundle: dict) -> dict:
        # –ï—Å–ª–∏ client_secrets —É–∂–µ –µ—Å—Ç—å ‚Äî –≤—ã—Ö–æ–¥–∏–º
        if isinstance(bundle.get('client_secrets'), dict):
            return bundle

        print("\nüîß –¢—Ä–µ–±—É—é—Ç—Å—è client_secrets –¥–ª—è Google OAuth")
        print("–í—ã –º–æ–∂–µ—Ç–µ:")
        print("  1) –í—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π JSON client_secret (–∏–∑ Google Cloud)")
        print("  2) –ò–ª–∏ –≤–≤–µ—Å—Ç–∏ client_id –∏ client_secret –≤—Ä—É—á–Ω—É—é")

        raw = input("\n–í—Å—Ç–∞–≤—å—Ç–µ JSON client_secrets –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞: ").strip()
        if raw:
            try:
                data = json.loads(raw)
                if 'installed' in data:
                    client_secrets = {"installed": data['installed']}
                elif 'web' in data:
                    client_secrets = {"installed": data['web']}
                else:
                    client_secrets = data
                bundle['client_secrets'] = client_secrets
                self._save_bundle(bundle)
                return bundle
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON: {e}")

        client_id = input("client_id: ").strip()
        client_secret = input("client_secret: ").strip()
        bundle['client_secrets'] = {
            "installed": {
                "client_id": client_id,
                "project_id": "youtube-upload",
                "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "token_uri": "https://oauth2.googleapis.com/token",
                "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                "client_secret": client_secret,
                "redirect_uris": ["http://localhost"],
            }
        }
        self._save_bundle(bundle)
        return bundle

    def _build_credentials_from_bundle(self, bundle: dict, scopes: list[str]) -> Credentials | None:
        # –ü—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        token_obj = bundle.get('token')
        if isinstance(token_obj, dict):
            try:
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                creds = Credentials(
                    token=token_obj.get('token'),
                    refresh_token=token_obj.get('refresh_token'),
                    token_uri=token_obj.get('token_uri'),
                    client_id=token_obj.get('client_id'),
                    client_secret=token_obj.get('client_secret'),
                    scopes=token_obj.get('scopes') or scopes,
                )
                return creds
            except Exception:
                pass

        # –ü—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Å—Ç—Ä–æ–∫–∏ JSON —Ç–æ–∫–µ–Ω–∞, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
        if isinstance(token_obj, str):
            try:
                creds = Credentials.from_authorized_user_info(json.loads(token_obj), scopes)
                return creds
            except Exception:
                pass

        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∫–∞–∫ plain credentials.json
        try:
            with open(self.bundle_path, encoding='utf-8') as f:
                return Credentials.from_authorized_user_file(self.bundle_path, scopes)
        except Exception:
            return None

    def _get_flow(self, bundle: dict, scopes: list[str]) -> InstalledAppFlow:
        client_secrets_data = bundle.get('client_secrets')
        if isinstance(client_secrets_data, dict):
            return InstalledAppFlow.from_client_config(client_secrets_data, scopes)

        # –ï—Å–ª–∏ bundle –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç client_secrets: –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        if os.path.exists(self.bundle_path):
            return InstalledAppFlow.from_client_secrets_file(self.bundle_path, scopes)

        env_path = os.getenv('YT_CLIENT_SECRETS')
        if env_path and os.path.exists(env_path):
            return InstalledAppFlow.from_client_secrets_file(env_path, scopes)

        default_secrets = os.path.join('config', 'youtube_client_secrets.json')
        if os.path.exists(default_secrets):
            return InstalledAppFlow.from_client_secrets_file(default_secrets, scopes)

        raise FileNotFoundError(
            "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª client_secrets. –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –≤ YT_CLIENT_SECRETS –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ config/youtube_client_secrets.json"
        )

    def _open_browser_hint(self) -> None:
        print("üåê –û—Ç–∫—Ä–æ–µ—Ç—Å—è –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google (–µ—Å–ª–∏ –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å ‚Äî –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é).")

    def _ensure_token_fresh(self, creds: Credentials, scopes: list[str]) -> Credentials | None:
        try:
            if not creds.valid:
                if creds.expired and creds.refresh_token:
                    creds.refresh(Request())
                else:
                    return None
            return creds
        except Exception:
            return None

    def setup(self) -> bool:
        print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ YouTube OAuth")
        print("=" * 50)

        bundle = self._load_bundle()
        scopes = bundle.get('scopes') or (bundle.get('token', {}) or {}).get('scopes') or self.default_scopes

        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–æ–∫–µ–Ω —É–∂–µ —Ä–∞–±–æ—á–∏–π ‚Äî –∫–∞–∫ –≤ setup_vk, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
        existing = self._build_credentials_from_bundle(bundle, scopes)
        existing = self._ensure_token_fresh(existing, scopes) if existing else None
        if existing:
            try:
                service = build('youtube', 'v3', credentials=existing)
                service.channels().list(part='id', mine=True).execute()
                print("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!")
                # –û–±–Ω–æ–≤–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ refresh
                try:
                    token_json = json.loads(existing.to_json())
                    if isinstance(bundle.get('client_secrets'), dict):
                        bundle['token'] = token_json
                        bundle['scopes'] = scopes
                        self._save_bundle(bundle)
                except Exception:
                    pass
                print("\nüìö –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
                print("1. –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏:")
                print("   uv run python main.py --upload --youtube --recordings \"–Ω–∞–∑–≤–∞–Ω–∏–µ_–∑–∞–ø–∏—Å–∏\"")
                print("\n2. –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π:")
                print("   uv run python main.py --upload --youtube --all")
                return True
            except Exception:
                pass

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ client_secrets –≤ bundle —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥
        bundle = self._ensure_client_secrets(bundle)

        print("üîë –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google")
        flow = self._get_flow(bundle, scopes)
        self._open_browser_hint()
        creds = flow.run_local_server(port=0)

        if not creds:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return False

        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤ API
        try:
            service = build('youtube', 'v3', credentials=creds)
            service.channels().list(part='id', mine=True).execute()
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        except HttpError as e:
            # –ï—Å–ª–∏, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ creds, –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã –¥–æ—Å—Ç—É–ø–∞ ‚Äî –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API: {e}. –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
            flow = self._get_flow(bundle, scopes)
            self._open_browser_hint()
            creds = flow.run_local_server(port=0)
        except Exception:
            # –ù–µ—Ñ–∞—Ç–∞–ª—å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
            pass

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ bundle: –æ–±–Ω–æ–≤–ª—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º token
        try:
            token_json = json.loads(creds.to_json())
        except Exception:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω")
            return False

        # –ï—Å–ª–∏ –≤ bundle –µ—Å—Ç—å client_secrets ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º token —Ä—è–¥–æ–º; –∏–Ω–∞—á–µ –ø–∏—à–µ–º –∫–∞–∫ plain credentials
        if isinstance(bundle.get('client_secrets'), dict):
            bundle['token'] = token_json
            bundle['scopes'] = scopes
            self._save_bundle(bundle)
        else:
            # –ü–∏—à–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π credentials —Ñ–∞–π–ª
            with open(self.bundle_path, 'w', encoding='utf-8') as f:
                f.write(creds.to_json())
            print(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {self.bundle_path}")

        print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ YouTube –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìö –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print("1. –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏:")
        print("   uv run python main.py --upload --youtube --recordings \"–Ω–∞–∑–≤–∞–Ω–∏–µ_–∑–∞–ø–∏—Å–∏\"")
        print("\n2. –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π:")
        print("   uv run python main.py --upload --youtube --all")
        return True


if __name__ == "__main__":
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–≥–ª–∞—Å–∏—è –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    try:
        webbrowser.get()
    except Exception:
        pass

    setup = YouTubeTokenSetup()
    success = setup.setup()
    if not success:
        raise SystemExit(1)
    raise SystemExit(0)



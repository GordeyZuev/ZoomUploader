from datetime import datetime

from logger import get_logger
from utils.formatting import normalize_datetime_string

logger = get_logger()


class InteractiveMapper:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π."""

    def __init__(self):
        self.logger = logger

    def handle_unknown_title(
        self, original_title: str, start_time: str, default_privacy: str = "private"
    ) -> tuple[str | None, str | None, str]:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è."""

        try:
            normalized_time = normalize_datetime_string(start_time)
            dt = datetime.fromisoformat(normalized_time)
            date_str = dt.strftime('%d.%m.%Y')
        except Exception:
            date_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"

        from rich.console import Console
        from rich.panel import Panel

        console = Console(force_terminal=True, color_system="auto")

        console.print("\n[bold red]" + "=" * 60 + "[/bold red]")
        console.print("[bold red]‚ùå –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ[/bold red]")
        console.print("[bold red]" + "=" * 60 + "[/bold red]")

        info_panel = Panel(
            f"[bold blue]üìù –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:[/bold blue] {original_title}\n"
            f"[bold green]üìÖ –î–∞—Ç–∞:[/bold green] {date_str}",
            title="[bold yellow]–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏[/bold yellow]",
            border_style="yellow",
        )
        console.print(info_panel)

        youtube_title = self._get_youtube_title(original_title, date_str)
        if youtube_title is None:
            return None, None, None

        privacy_status = self._get_privacy_status(default_privacy)
        if privacy_status is None:
            return None, None, None

        description = f"–ó–∞–ø–∏—Å—å –æ—Ç {date_str}"

        console.print(
            f"\n[bold green]‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º:[/bold green] [bold white]\"{youtube_title}\"[/bold white] [bold green]–∫–∞–∫[/bold green] [bold cyan]{privacy_status}[/bold cyan]"
        )
        console.print("[bold green]" + "=" * 60 + "[/bold green]")

        return youtube_title, description, privacy_status

    def ask_playlist_optional(self) -> str | None:
        """–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å ID –ø–ª–µ–π–ª–∏—Å—Ç–∞ YouTube."""
        try:
            print("\nüìÉ –ü–ª–µ–π–ª–∏—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
            playlist_id = input("   ID –ø–ª–µ–π–ª–∏—Å—Ç–∞ (–∏–ª–∏ –ø—É—Å—Ç–æ): ").strip()
            return playlist_id or None
        except KeyboardInterrupt:
            print("\n   ‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return None
        except EOFError:
            print("\n   ‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            return None

    def _get_youtube_title(self, original_title: str, date_str: str) -> str | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è YouTube –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

        suggested_title = f"{original_title} ({date_str})"

        print("üé¨ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è YouTube:")
        print(f"   –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {suggested_title}")
        print()

        while True:
            try:
                youtube_title = input("   –ù–∞–∑–≤–∞–Ω–∏–µ: ").strip()

                if not youtube_title:
                    print("   ‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                    continue

                if len(youtube_title) > 100:
                    print("   ‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)")
                    continue

                return youtube_title

            except KeyboardInterrupt:
                print("\n   ‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return None
            except EOFError:
                print("\n   ‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                return None

    def _get_privacy_status(self, default_privacy: str) -> str | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

        privacy_options = {
            "1": ("private", "–ø—Ä–∏–≤–∞—Ç–Ω–æ–µ"),
            "2": ("unlisted", "–ø–æ —Å—Å—ã–ª–∫–µ"),
            "3": ("public", "–ø—É–±–ª–∏—á–Ω–æ–µ"),
        }

        print("üîí –°—Ç–∞—Ç—É—Å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏:")
        for key, (value, description) in privacy_options.items():
            marker = " (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)" if value == default_privacy else ""
            print(f"   {key}) {value} ({description}){marker}")

        print()

        while True:
            try:
                choice = input("   –í—ã–±–æ—Ä [1-3]: ").strip()

                if not choice:
                    return default_privacy

                if choice in privacy_options:
                    return privacy_options[choice][0]

                print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3")

            except KeyboardInterrupt:
                print("\n   ‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return None
            except EOFError:
                print("\n   ‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                return None

    def ask_continue_upload(self, remaining_count: int) -> bool:
        """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∑–∫—É –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–∏–¥–µ–æ."""

        if remaining_count <= 0:
            return True

        print(f"\nüìä –û—Å—Ç–∞–ª–æ—Å—å –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {remaining_count}")
        print()

        while True:
            try:
                choice = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É? [y/N]: ").strip().lower()

                if choice in ['', 'n', 'no']:
                    return False
                elif choice in ['y', 'yes']:
                    return True
                else:
                    print("   ‚ùå –í–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ 'n' –¥–ª—è –æ—Ç–º–µ–Ω—ã")

            except KeyboardInterrupt:
                print("\n   ‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return False
            except EOFError:
                print("\n   ‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                return False

    def show_upload_summary(
        self,
        total_count: int,
        processed_count: int,
        skipped_count: int,
        error_count: int,
        uploaded_recordings: list = None,
    ):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ."""
        from rich.console import Console

        console = Console(force_terminal=True, color_system="auto")

        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        console.print("\n[bold cyan]üìä –°–í–û–î–ö–ê –ó–ê–ì–†–£–ó–ö–ò[/bold cyan]")
        console.print("[bold cyan]" + "=" * 60 + "[/bold cyan]")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –ø—Ä–æ—Å—Ç–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        console.print(f"\n[bold blue]üìÅ –í—Å–µ–≥–æ –≤–∏–¥–µ–æ:[/bold blue] {total_count}")

        if processed_count > 0:
            console.print(f"[bold green]‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:[/bold green] {processed_count}")

        if skipped_count > 0:
            console.print(f"[bold yellow]‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ:[/bold yellow] {skipped_count}")

        if error_count > 0:
            console.print(f"[bold red]‚ùå –û—à–∏–±–æ–∫:[/bold red] {error_count}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
        if uploaded_recordings and processed_count > 0:
            console.print("\n[bold white]üìπ –ó–ê–ì–†–£–ñ–ï–ù–ù–´–ï –í–ò–î–ï–û:[/bold white]")

            for i, recording in enumerate(uploaded_recordings, 1):
                console.print(
                    f"\n[bold cyan]{i}.[/bold cyan] [bold white]{recording.topic}[/bold white]"
                )

                # –°—Å—ã–ª–∫–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                has_any_link = False
                if hasattr(recording, 'youtube_url') and recording.youtube_url:
                    console.print(
                        f"    [bold red]üì∫ YouTube:[/bold red] [link={recording.youtube_url}]{recording.youtube_url}[/link]"
                    )
                    has_any_link = True

                if hasattr(recording, 'vk_url') and recording.vk_url:
                    console.print(
                        f"    [bold blue]üìò VK:[/bold blue] [link={recording.vk_url}]{recording.vk_url}[/link]"
                    )
                    has_any_link = True

                if not has_any_link:
                    console.print("    [dim]–°—Å—ã–ª–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã[/dim]")

        # –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.print("\n[bold white]üìä –ò–¢–û–ì–ò:[/bold white]")
        if processed_count == total_count and error_count == 0:
            console.print("[bold green]üéâ –í—Å–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã![/bold green]")
            console.print("[bold green]‚ú® –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ 100%[/bold green]")
        elif processed_count > 0:
            success_rate = (processed_count / total_count) * 100
            console.print(f"[bold green]‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%[/bold green]")
            if error_count > 0:
                console.print("[bold yellow]‚ö†Ô∏è –ï—Å—Ç—å –æ—à–∏–±–∫–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏[/bold yellow]")
        else:
            console.print("[bold red]‚ùå –ù–∏ –æ–¥–Ω–æ –≤–∏–¥–µ–æ –Ω–µ –±—ã–ª–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ[/bold red]")

        console.print("\n[bold cyan]üèÅ –ó–ê–í–ï–†–®–ï–ù–û[/bold cyan]")
        console.print("[bold cyan]" + "=" * 60 + "[/bold cyan]")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞–ø–ø–µ—Ä–∞
_interactive_mapper = None


def get_interactive_mapper() -> InteractiveMapper:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞–ø–ø–µ—Ä–∞."""
    global _interactive_mapper
    if _interactive_mapper is None:
        _interactive_mapper = InteractiveMapper()
    return _interactive_mapper


def handle_unknown_title_interactive(
    original_title: str, start_time: str, default_privacy: str = "private"
) -> tuple[str | None, str | None, str]:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è."""
    mapper = get_interactive_mapper()
    return mapper.handle_unknown_title(original_title, start_time, default_privacy)

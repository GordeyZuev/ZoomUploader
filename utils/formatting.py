from datetime import datetime


def normalize_datetime_string(date_string: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞."""
    if not date_string:
        return date_string

    time_str = date_string
    if time_str.endswith('Z'):
        time_str = time_str[:-1]
    if time_str.endswith('+00:00'):
        time_str = time_str[:-6]

    return time_str


def format_duration(minutes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
    if minutes == 0:
        return "0–º"

    hours = minutes // 60
    mins = minutes % 60

    if hours > 0:
        if mins > 0:
            return f"{hours}—á {mins}–º"
        else:
            return f"{hours}—á"
    else:
        return f"{mins}–º"


def format_file_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
    if size_bytes == 0:
        return "0 B"

    size_names = ["B", "KB", "MB", "GB", "TB"]
    i = 0

    while size_bytes >= 1024 and i < len(size_names) - 1:
        size_bytes /= 1024.0
        i += 1

    if i == 0:
        return f"{size_bytes:.0f} {size_names[i]}"
    else:
        return f"{size_bytes:.1f} {size_names[i]}"


def format_date(date_string: str, input_format: str = "%Y-%m-%dT%H:%M:%SZ") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
    try:
        normalized_time = normalize_datetime_string(date_string)
        dt = datetime.fromisoformat(normalized_time)
        return dt.strftime("%d.%m.%Y %H:%M:%S")
    except (ValueError, TypeError):
        return date_string


def format_status(status: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
    status_translations = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç',
        'downloading': '–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è',
        'downloaded': '–ó–∞–≥—Ä—É–∂–µ–Ω–æ',
        'processing': '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
        'processed': '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ',
        'uploading': '–í—ã–≥—Ä—É–∂–∞–µ—Ç—Å—è',
        'uploaded': '–í—ã–≥—Ä—É–∂–µ–Ω–æ',
        'failed': '–û—à–∏–±–∫–∞',
        'skipped': '–ü—Ä–æ–ø—É—â–µ–Ω–æ',
    }

    return status_translations.get(status, status)


def format_meeting_info(recording) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å—Ç—Ä–µ—á–µ –¥–ª—è –≤—ã–≤–æ–¥–∞."""
    topic = recording.topic or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    date = format_date(recording.start_time)
    duration = format_duration(recording.duration)
    status = format_status(recording.status.value)

    info = f"üìÖ {topic}\n"
    info += f"   ‚è∞ –î–∞—Ç–∞: {date}\n"
    info += f"   ‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n"
    info += f"   üìä {status}\n"

    if recording.video_file_size > 0:
        video_size = format_file_size(recording.video_file_size)
        info += f"   üé¨ –í–∏–¥–µ–æ: {video_size}\n"

    if recording.chat_file_size > 0:
        chat_size = format_file_size(recording.chat_file_size)
        info += f"   üí¨ –ß–∞—Ç: {chat_size}\n"

    if recording.error_message:
        info += f"   ‚ùå –û—à–∏–±–∫–∞: {recording.error_message}\n"

    return info

"""
–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FFmpeg
"""

import asyncio
import json
import os
import re
import shutil
import traceback
from datetime import datetime
from pathlib import Path
from typing import Any

from logger import get_logger

from .audio_detector import AudioDetector
from .config import ProcessingConfig
from .segments import SegmentProcessor, VideoSegment

logger = get_logger()


class VideoProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –∏ –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∏."""

    def __init__(self, config: ProcessingConfig):
        self.config = config
        self.segment_processor = SegmentProcessor(config)
        self.audio_detector = AudioDetector(
            silence_threshold=config.silence_threshold,
            min_silence_duration=config.min_silence_duration,
        )
        self._ensure_directories()

    def _ensure_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π."""
        for directory in [self.config.input_dir, self.config.output_dir, self.config.temp_dir]:
            Path(directory).mkdir(parents=True, exist_ok=True)

    def _sanitize_filename(self, filename: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
        filename = re.sub(r'[<>:"/\\|?*]', '_', filename)
        filename = re.sub(r'\s+', '_', filename)
        filename = filename.strip('_')
        if len(filename) > 200:
            filename = filename[:200]
        return filename

    async def get_video_info(self, video_path: str) -> dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ."""
        cmd = [
            'ffprobe',
            '-v',
            'quiet',
            '-print_format',
            'json',
            '-show_format',
            '-show_streams',
            video_path,
        ]

        try:
            process = await asyncio.create_subprocess_exec(
                *cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
            )

            stdout, stderr = await process.communicate()

            if process.returncode != 0:
                raise RuntimeError(f"FFprobe error: {stderr.decode()}")

            info = json.loads(stdout.decode())
            video_stream = next((s for s in info['streams'] if s['codec_type'] == 'video'), None)
            audio_stream = next((s for s in info['streams'] if s['codec_type'] == 'audio'), None)

            return {
                'duration': float(info['format']['duration']),
                'size': int(info['format']['size']),
                'width': int(video_stream['width']) if video_stream else 0,
                'height': int(video_stream['height']) if video_stream else 0,
                'fps': eval(video_stream['r_frame_rate']) if video_stream else 0,
                'video_codec': video_stream['codec_name'] if video_stream else None,
                'audio_codec': audio_stream['codec_name'] if audio_stream else None,
                'bitrate': int(info['format']['bit_rate']) if 'bit_rate' in info['format'] else 0,
            }

        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {e}") from e

    async def trim_video(
        self, input_path: str, output_path: str, start_time: float, end_time: float
    ) -> bool:
        """–û–±—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏."""
        duration = end_time - start_time

        cmd = [
            'ffmpeg',
            '-i',
            input_path,
            '-ss',
            str(start_time),
            '-t',
            str(duration),
            '-c:v',
            self.config.video_codec,
            '-c:a',
            self.config.audio_codec,
        ]

        if self.config.video_bitrate != "original":
            cmd.extend(['-b:v', self.config.video_bitrate])
        if self.config.audio_bitrate != "original":
            cmd.extend(['-b:a', self.config.audio_bitrate])
        if self.config.video_codec != "copy" and self.config.fps > 0:
            cmd.extend(['-r', str(self.config.fps)])
        if self.config.resolution != "original":
            cmd.extend(['-s', self.config.resolution])

        cmd.extend(['-y', output_path])

        try:
            logger.info(f"üîß –ö–æ–º–∞–Ω–¥–∞ FFmpeg: {' '.join(cmd)}")

            # –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏–Ω–Ω–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—É–±–∏—Ä–∞–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –æ—Å–Ω–æ–≤–Ω—ã–º progress bar)
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ progress bar
            logger.info("üîß –ó–∞–ø—É—Å–∫ FFmpeg –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ...")

            process = await asyncio.create_subprocess_exec(
                *cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
            )

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            await process.wait()

            if process.returncode != 0:
                logger.error(f"‚ùå FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {process.returncode}")
                stderr_output = await process.stderr.read()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ FFmpeg: {stderr_output.decode()}")
                return False

            if os.path.exists(output_path):
                file_size = os.path.getsize(output_path)
                logger.info(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {output_path} ({file_size} –±–∞–π—Ç)")
                return True
            else:
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω: {output_path}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–µ–∑–∫–µ –≤–∏–¥–µ–æ: {e}")
            logger.error(f"‚ùå –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            return False

    async def process_segment(self, segment: VideoSegment, input_path: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞."""
        try:
            start_time = segment.start_time
            end_time = segment.end_time

            if self.config.remove_intro and start_time == 0:
                start_time = self.config.intro_duration

            if self.config.remove_outro:
                video_info = await self.get_video_info(input_path)
                max_time = video_info['duration']
                if end_time >= max_time - self.config.outro_duration:
                    end_time = max_time - self.config.outro_duration

            os.makedirs(os.path.dirname(segment.output_path), exist_ok=True)
            success = await self.trim_video(input_path, segment.output_path, start_time, end_time)

            if success:
                segment.processed = True
                segment.processing_time = datetime.now()
                return True
            else:
                return False

        except Exception as e:
            logger.info(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ {segment.title}: {e}")
            return False

    async def process_video(
        self, video_path: str, title: str, custom_segments: list[tuple] | None = None
    ) -> list[VideoSegment]:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ."""
        try:
            video_info = await self.get_video_info(video_path)
            duration = video_info['duration']

            logger.info(f"üìπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ: {title}")
            logger.info(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration / 60:.1f} –º–∏–Ω—É—Ç")
            logger.info(f"   –†–∞–∑–º–µ—Ä: {video_info['size'] / 1024 / 1024:.1f} MB")
            logger.info(f"   –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {video_info['width']}x{video_info['height']}")

            if custom_segments:
                segments = self.segment_processor.create_segments_from_timestamps(
                    custom_segments, title
                )
            else:
                segments = self.segment_processor.create_segments_from_duration(duration, title)

            logger.info(f"   –°–æ–∑–¥–∞–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {len(segments)}")

            processed_segments = []
            for i, segment in enumerate(segments, 1):
                logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ {i}/{len(segments)}: {segment.title}")

                success = await self.process_segment(segment, video_path)
                if success:
                    processed_segments.append(segment)
                    logger.info(f"   ‚úÖ –°–µ–≥–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {segment.output_path}")
                else:
                    logger.info(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞: {segment.title}")

            logger.info(
                f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(processed_segments)}/{len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤"
            )
            return processed_segments

        except Exception as e:
            logger.info(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ {title}: {e}")
            return []

    async def process_video_with_audio_detection(
        self, video_path: str, title: str
    ) -> tuple[bool, str | None]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–µ–∑–∫–æ–π –ø–æ –∑–≤—É–∫—É."""
        try:
            logger.info(f"üé¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π –∑–≤—É–∫–∞: {title}")

            if not os.path.exists(video_path):
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
                return False, None

            logger.info(f"üîç –î–µ—Ç–µ–∫—Ü–∏—è –∑–≤—É–∫–∞ –¥–ª—è: {title}")
            first_sound, last_sound = await self.audio_detector.detect_audio_boundaries(video_path)

            if first_sound is None or last_sound is None:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –∑–≤—É–∫–∞ –¥–ª—è {title}")
                return False, None

            logger.info(f"üéµ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –∑–≤—É–∫–∞: {first_sound:.1f}s - {last_sound:.1f}s")

            start_time = max(0, first_sound - self.config.padding_before)
            end_time = last_sound + self.config.padding_after

            logger.info(
                f"‚úÇÔ∏è –û–±—Ä–µ–∑–∫–∞ —Å {start_time:.1f}s –ø–æ {end_time:.1f}s (–æ—Ç—Å—Ç—É–ø—ã: -{self.config.padding_before}s, +{self.config.padding_after}s)"
            )

            safe_title = self._sanitize_filename(title)
            output_filename = f"{safe_title}_processed.mp4"
            output_path = os.path.join(self.config.output_dir, output_filename)

            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            logger.info("üé¨ –ó–∞–ø—É—Å–∫ FFmpeg –¥–ª—è –æ–±—Ä–µ–∑–∫–∏...")
            success = await self.trim_video(video_path, output_path, start_time, end_time)

            if success:
                logger.info(f"‚úÖ –í–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {output_path}")
                return True, output_path
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏ –≤–∏–¥–µ–æ: {title}")
                return False, None

        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ {title}: {e}")
            logger.error(f"‚ùå –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            return False, None

    async def batch_process(self, video_files: list[str]) -> dict[str, list[VideoSegment]]:
        """–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∏–¥–µ–æ."""
        results = {}

        for video_path in video_files:
            if not os.path.exists(video_path):
                logger.info(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
                continue

            title = Path(video_path).stem

            segments = await self.process_video(video_path, title)
            results[video_path] = segments

        return results

    def cleanup_temp_files(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
        if not self.config.keep_temp_files:
            temp_dir = Path(self.config.temp_dir)
            if temp_dir.exists():
                shutil.rmtree(temp_dir)
                logger.info(f"üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã: {temp_dir}")

    def get_processing_statistics(self, results: dict[str, list[VideoSegment]]) -> dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        total_videos = len(results)
        total_segments = sum(len(segments) for segments in results.values())
        processed_segments = sum(
            len([s for s in segments if s.processed]) for segments in results.values()
        )

        total_duration = 0
        for segments in results.values():
            for segment in segments:
                if segment.processed:
                    total_duration += segment.duration

        return {
            'total_videos': total_videos,
            'total_segments': total_segments,
            'processed_segments': processed_segments,
            'success_rate': (processed_segments / total_segments * 100)
            if total_segments > 0
            else 0,
            'total_processed_duration': total_duration,
            'total_processed_duration_formatted': f"{total_duration / 60:.1f} –º–∏–Ω—É—Ç",
        }

"""
–î–µ—Ç–µ–∫—Ç–æ—Ä –∑–≤—É–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–µ–∑–∫–∏ –≤–∏–¥–µ–æ
"""

import asyncio
import json

from logger import get_logger

logger = get_logger()


class AudioDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –∑–≤—É–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""

    def __init__(self, silence_threshold: float = -30.0, min_silence_duration: float = 2.0):
        self.silence_threshold = silence_threshold
        self.min_silence_duration = min_silence_duration

    async def detect_audio_boundaries(self, video_path: str) -> tuple[float | None, float | None]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü –∑–≤—É–∫–∞ –≤ –≤–∏–¥–µ–æ."""
        try:
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ –∑–≤—É–∫–∞ –≤ –≤–∏–¥–µ–æ: {video_path}")

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
            if not await self._validate_video_file(video_path):
                logger.error(f"–§–∞–π–ª –≤–∏–¥–µ–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {video_path}")
                return None, None

            cmd = [
                'ffmpeg',
                '-i',
                video_path,
                '-af',
                f'silencedetect=noise={self.silence_threshold}dB:d={self.min_silence_duration}',
                '-f',
                'null',
                '-',
            ]

            process = await asyncio.create_subprocess_exec(
                *cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
            )

            stdout, stderr = await process.communicate()

            if process.returncode != 0:
                error_msg = stderr.decode()
                logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∑–≤—É–∫–∞: {error_msg}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ FFmpeg
                if "Invalid data found when processing input" in error_msg:
                    logger.error("–§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –≤–∏–¥–µ–æ")
                elif "moov atom not found" in error_msg:
                    logger.error("–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ")
                elif "No such file or directory" in error_msg:
                    logger.error("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

                return None, None

            silence_periods = self._parse_silence_detection(stderr.decode())

            if not silence_periods:
                logger.info("–ó–≤—É–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ –≤–∏–¥–µ–æ")
                return 0.0, None  # –í–µ—Å—å —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–≤—É–∫

            first_sound = self._find_first_sound(silence_periods)
            last_sound = await self._find_last_sound(silence_periods, video_path)

            logger.info(f"üéµ –ì—Ä–∞–Ω–∏—Ü—ã –∑–≤—É–∫–∞: {first_sound:.1f}s - {last_sound:.1f}s")
            return first_sound, last_sound

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∑–≤—É–∫–∞: {e}")
            return None, None

    def _parse_silence_detection(self, ffmpeg_output: str) -> list[tuple[float, float]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ ffmpeg –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤ —Ç–∏—à–∏–Ω—ã."""
        silence_periods = []
        lines = ffmpeg_output.split('\n')

        for line in lines:
            if 'silence_start' in line:
                try:
                    start_time = float(line.split('silence_start: ')[1].split()[0])
                except (IndexError, ValueError):
                    continue
            elif 'silence_end' in line:
                try:
                    end_time = float(line.split('silence_end: ')[1].split()[0])
                    silence_periods.append((start_time, end_time))
                except (IndexError, ValueError, NameError):
                    continue

        return silence_periods

    def _find_first_sound(self, silence_periods: list[tuple[float, float]]) -> float:
        """–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–≤–æ–≥–æ –∑–≤—É–∫–∞."""
        if not silence_periods:
            return 0.0

        first_silence_start = silence_periods[0][0]
        if first_silence_start > 0.1:
            return 0.0
        return silence_periods[0][1]

    async def _find_last_sound(
        self, silence_periods: list[tuple[float, float]], video_path: str
    ) -> float | None:
        """–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–≤—É–∫–∞."""
        if not silence_periods:
            return None  # –í–µ—Å—å —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–≤—É–∫

        duration = await self._get_video_duration(video_path)
        if duration is None:
            return None

        last_silence_end = silence_periods[-1][1]
        if last_silence_end < duration - 0.1:
            return duration
        return silence_periods[-1][0]

    async def _get_video_duration(self, video_path: str) -> float | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ."""
        try:
            cmd = ['ffprobe', '-v', 'quiet', '-print_format', 'json', '-show_format', video_path]

            process = await asyncio.create_subprocess_exec(
                *cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
            )

            stdout, stderr = await process.communicate()

            if process.returncode == 0:
                data = json.loads(stdout.decode())
                return float(data['format']['duration'])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ: {e}")

        return None

    async def _validate_video_file(self, video_path: str) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.

        Args:
            video_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É

        Returns:
            True –µ—Å–ª–∏ —Ñ–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω, False –∏–Ω–∞—á–µ
        """
        try:
            import os
            from pathlib import Path

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(video_path):
                logger.error(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {video_path}")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(video_path)
            if file_size < 1024:  # –ú–µ–Ω—å—à–µ 1 –ö–ë
                logger.error(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª: {file_size} –±–∞–π—Ç")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª HTML
            with open(video_path, 'rb') as f:
                first_chunk = f.read(1024)
                if b'<html' in first_chunk.lower() or b'<!doctype html' in first_chunk.lower():
                    logger.error("–§–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π, –∞ –Ω–µ –≤–∏–¥–µ–æ")
                    return False

                # –î–ª—è MP4 –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if Path(video_path).suffix.lower() == '.mp4':
                    if not (
                        first_chunk.startswith(b'\x00\x00\x00')
                        or b'ftyp' in first_chunk
                        or b'moov' in first_chunk
                    ):
                        logger.error("–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º MP4 –≤–∏–¥–µ–æ")
                        return False

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ {video_path}: {e}")
            return False

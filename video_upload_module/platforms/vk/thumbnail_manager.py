import os

import aiohttp

from logger import get_logger

from ...config_factory import VKConfig

logger = get_logger()


class VKThumbnailManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∏–Ω–∏–∞—Ç—é—Ä–∞–º–∏ –≤–∏–¥–µ–æ –≤ VK
    """

    def __init__(self, config: VKConfig):
        self.config = config
        self.base_url = "https://api.vk.com/method"

    def validate_thumbnail(self, thumbnail_path: str) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã"""
        if not os.path.exists(thumbnail_path):
            return False, f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {thumbnail_path}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB –¥–ª—è VK)
        file_size = os.path.getsize(thumbnail_path)
        if file_size > 5 * 1024 * 1024:
            return False, f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size / 1024 / 1024:.1f}MB (–º–∞–∫—Å–∏–º—É–º 5MB)"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        file_ext = os.path.splitext(thumbnail_path)[1].lower().lstrip('.')
        if file_ext not in ['jpg', 'jpeg', 'png']:
            return False, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {file_ext} (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: jpg, jpeg, png)"

        return True, "OK"

    async def set_video_thumbnail(self, video_id: str, owner_id: str, thumbnail_path: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–∞—Ç—é—Ä—ã –¥–ª—è –≤–∏–¥–µ–æ"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            is_valid, message = self.validate_thumbnail(thumbnail_path)
            if not is_valid:
                logger.error(f"‚ùå –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {message}")
                return False

            # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏–Ω–∏–∞—Ç—é—Ä—ã
            upload_url = await self._get_thumbnail_upload_url(owner_id)
            if not upload_url:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏–Ω–∏–∞—Ç—é—Ä—ã")
                return False

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É
            upload_result = await self._upload_thumbnail_file(upload_url, thumbnail_path)
            if not upload_result:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏–Ω–∏–∞—Ç—é—Ä—ã")
                return False

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É –¥–ª—è –≤–∏–¥–µ–æ
            success = await self._save_uploaded_thumbnail(video_id, owner_id, upload_result)
            if success:
                logger.info(f"üñºÔ∏è –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –≤–∏–¥–µ–æ {video_id}")
                return True
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–Ω–∏–∞—Ç—é—Ä—ã: {e}")
            return False

    async def _get_thumbnail_upload_url(self, owner_id: str) -> str | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏–Ω–∏–∞—Ç—é—Ä—ã –≤–∏–¥–µ–æ"""
        try:
            params = {'access_token': self.config.access_token, 'owner_id': owner_id, 'v': '5.199'}

            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/video.getThumbUploadUrl", data=params
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        if 'error' in data:
                            logger.error(f"‚ùå VK API Error: {data['error']}")
                            return None
                        return data['response']['upload_url']
                    else:
                        logger.error(f"‚ùå HTTP Error: {response.status}")
                        return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏–Ω–∏–∞—Ç—é—Ä—ã: {e}")
            return None

    async def _upload_thumbnail_file(self, upload_url: str, thumbnail_path: str) -> str | None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –º–∏–Ω–∏–∞—Ç—é—Ä—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        try:
            with open(thumbnail_path, 'rb') as thumbnail_file:
                files = {'file': thumbnail_file}

                async with aiohttp.ClientSession() as session:
                    async with session.post(upload_url, data=files) as response:
                        if response.status == 200:
                            text = await response.text()
                            logger.info("üñºÔ∏è –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
                            return text
                        else:
                            logger.error(f"‚ùå HTTP Upload Error: {response.status}")
                            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏–Ω–∏–∞—Ç—é—Ä—ã: {e}")
            return None

    async def _save_uploaded_thumbnail(
        self, video_id: str, owner_id: str, upload_result: str
    ) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –º–∏–Ω–∏–∞—Ç—é—Ä—ã –¥–ª—è –≤–∏–¥–µ–æ"""
        try:
            params = {
                'access_token': self.config.access_token,
                'owner_id': owner_id,
                'thumb_json': upload_result,  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
                'v': '5.241',
                'video_id': video_id,
                'set_thumb': 1,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É
            }

            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/video.saveUploadedThumb", data=params
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        if 'error' in data:
                            logger.error(
                                f"‚ùå VK API Error –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∏–Ω–∏–∞—Ç—é—Ä—ã: {data['error']}"
                            )
                            return False

                        logger.info(f"üñºÔ∏è –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –≤–∏–¥–µ–æ {video_id}")
                        return True
                    else:
                        logger.error(f"‚ùå HTTP Error –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∏–Ω–∏–∞—Ç—é—Ä—ã: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã: {e}")
            return False

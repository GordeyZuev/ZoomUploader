"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∏–Ω–∏–∞—Ç—é—Ä YouTube
"""

import asyncio
import os
from typing import Any

import aiohttp
from googleapiclient.errors import HttpError
from googleapiclient.http import MediaFileUpload

from logger import get_logger

from ...config_factory import YouTubeConfig

logger = get_logger()


class YouTubeThumbnailManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∏–Ω–∏–∞—Ç—é—Ä–∞–º–∏ YouTube"""

    def __init__(self, service, config: YouTubeConfig):
        self.service = service
        self.config = config
        self.supported_formats = ['jpg', 'jpeg', 'png', 'gif']
        self.max_file_size = 2 * 1024 * 1024  # 2MB
        self.recommended_size = (1280, 720)  # 16:9

    def validate_thumbnail(self, thumbnail_path: str) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã"""
        if not os.path.exists(thumbnail_path):
            return False, "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

        file_size = os.path.getsize(thumbnail_path)
        if file_size > self.max_file_size:
            return False, f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size / 1024 / 1024:.1f}MB > 2MB"

        file_ext = os.path.splitext(thumbnail_path)[1].lower().lstrip('.')
        if file_ext not in self.supported_formats:
            return (
                False,
                f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {file_ext}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: {', '.join(self.supported_formats)}",
            )

        return True, "OK"

    async def set_thumbnail(self, video_id: str, thumbnail_path: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–∞—Ç—é—Ä—ã –¥–ª—è –≤–∏–¥–µ–æ"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        is_valid, message = self.validate_thumbnail(thumbnail_path)
        if not is_valid:
            logger.error(f"‚ùå –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {message}")
            return False

        try:
            media = MediaFileUpload(thumbnail_path, mimetype='image/jpeg')
            self.service.thumbnails().set(videoId=video_id, media_body=media).execute()

            logger.info(f"üñºÔ∏è –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –≤–∏–¥–µ–æ {video_id}")
            return True

        except HttpError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–Ω–∏–∞—Ç—é—Ä—ã: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–∏–Ω–∏–∞—Ç—é—Ä—ã: {e}")
            return False

    async def get_thumbnail_info(self, video_id: str) -> dict[str, Any] | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∏–Ω–∏–∞—Ç—é—Ä–µ –≤–∏–¥–µ–æ"""
        try:
            request = self.service.videos().list(part='snippet', id=video_id)
            response = request.execute()

            if response['items']:
                video = response['items'][0]
                thumbnails = video['snippet'].get('thumbnails', {})

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–Ω–∏–∞—Ç—é—Ä–∞—Ö
                return {
                    'video_id': video_id,
                    'has_custom_thumbnail': 'maxres' in thumbnails or 'standard' in thumbnails,
                    'available_sizes': list(thumbnails.keys()),
                    'default_thumbnail': thumbnails.get('default', {}).get('url'),
                    'high_thumbnail': thumbnails.get('high', {}).get('url'),
                    'maxres_thumbnail': thumbnails.get('maxres', {}).get('url'),
                }

            return None

        except HttpError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∏–Ω–∏–∞—Ç—é—Ä–µ: {e}")
            return None

    async def download_thumbnail(
        self, video_id: str, output_path: str, size: str = "maxres"
    ) -> bool:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–∏–Ω–∏–∞—Ç—é—Ä—ã –≤–∏–¥–µ–æ"""
        try:
            thumbnail_info = await self.get_thumbnail_info(video_id)
            if not thumbnail_info:
                return False

            # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∏–Ω–∏–∞—Ç—é—Ä—ã
            thumbnail_url = None
            if size in thumbnail_info.get('available_sizes', []):
                thumbnail_url = thumbnail_info.get(f'{size}_thumbnail')
            elif 'high_thumbnail' in thumbnail_info:
                thumbnail_url = thumbnail_info['high_thumbnail']
            elif 'default_thumbnail' in thumbnail_info:
                thumbnail_url = thumbnail_info['default_thumbnail']

            if not thumbnail_url:
                logger.warning(f"‚ùå –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ {size} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False

            # –°–∫–∞—á–∏–≤–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É
            async with aiohttp.ClientSession() as session:
                async with session.get(thumbnail_url) as response:
                    if response.status == 200:
                        with open(output_path, 'wb') as f:
                            async for chunk in response.content.iter_chunked(8192):
                                f.write(chunk)

                        logger.info(f"üñºÔ∏è –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ —Å–∫–∞—á–∞–Ω–∞: {output_path}")
                        return True
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã: HTTP {response.status}")
                        return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã: {e}")
            return False

    async def batch_set_thumbnails(self, video_thumbnail_pairs: list[tuple]) -> dict[str, bool]:
        """–ü–∞–∫–µ—Ç–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–∞—Ç—é—Ä"""
        results = {}

        for video_id, thumbnail_path in video_thumbnail_pairs:
            logger.info(f"üñºÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–∞—Ç—é—Ä—ã –¥–ª—è –≤–∏–¥–µ–æ {video_id}...")
            success = await self.set_thumbnail(video_id, thumbnail_path)
            results[video_id] = success

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(1)

        return results

    def get_thumbnail_recommendations(self) -> dict[str, Any] | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –º–∏–Ω–∏–∞—Ç—é—Ä–∞–º"""
        return {
            'recommended_size': f"{self.recommended_size[0]}x{self.recommended_size[1]}",
            'aspect_ratio': '16:9',
            'max_file_size_mb': self.max_file_size / (1024 * 1024),
            'supported_formats': self.supported_formats,
            'tips': [
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —è—Ä–∫–∏–µ, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞',
                '–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤–∏–¥–µ–æ',
                '–ò–∑–±–µ–≥–∞–π—Ç–µ –º–µ–ª–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π',
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–∞—Ç—é—Ä–∞ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö',
            ],
        }

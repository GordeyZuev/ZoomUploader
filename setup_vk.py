#!/usr/bin/env python3
"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ VK —Ç–æ–∫–µ–Ω–∞
"""

import asyncio
import json
import os
import webbrowser
from urllib.parse import urlencode

import aiohttp


class VKTokenSetup:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ VK —Ç–æ–∫–µ–Ω–∞"""

    def __init__(self, app_id: str = "54249533"):
        self.app_id = app_id

    def get_auth_url(self, scope: str = "video,groups,wall") -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        params = {
            'client_id': self.app_id,
            'display': 'page',
            'redirect_uri': 'https://oauth.vk.com/blank.html',
            'scope': scope,
            'response_type': 'token',
            'v': '5.131',
        }

        return f"https://oauth.vk.com/authorize?{urlencode(params)}"

    async def get_token_interactive(self, scope: str = "video,groups,wall") -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
        print("üîë –ü–æ–ª—É—á–µ–Ω–∏–µ VK —Ç–æ–∫–µ–Ω–∞")
        print("=" * 50)

        auth_url = self.get_auth_url(scope)

        print("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        webbrowser.open(auth_url)

        print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
        print("1. –í–æ–π–¥–∏—Ç–µ –≤ VK (–µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã)")
        print("2. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é")
        print("3. –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É VK")
        print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ access_token –∏–∑ URL –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ")
        print("\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–∞–∑—Ä–µ—à–∏–ª–∏ –ø—Ä–∞–≤–∞:")
        for permission in scope.split(','):
            print(f"   ‚úÖ {permission.strip()}")

        print("\nüí° –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç –≤ URL –≤ —Ñ–æ—Ä–º–∞—Ç–µ:")
        print("   access_token=YOUR_TOKEN_HERE&expires_in=86400&user_id=123456")
        print("\n‚ö†Ô∏è  –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ access_token (–±–µ–∑ access_token=)")

        attempts = 0
        max_attempts = 3

        while attempts < max_attempts:
            try:
                token = input(
                    f"\n–í—Å—Ç–∞–≤—å—Ç–µ access_token (–ø–æ–ø—ã—Ç–∫–∞ {attempts + 1}/{max_attempts}): "
                ).strip()
                if token:
                    if token.startswith('access_token='):
                        token = token.split('=')[1].split('&')[0]

                    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω...")
                    is_valid, error_type = await self.test_token_with_error_type(token)

                    if is_valid:
                        print("‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!")
                        self.save_token(token)
                        return token
                    else:
                        attempts += 1
                        if error_type == "ip_mismatch":
                            print("\nüö® –ü–†–û–ë–õ–ï–ú–ê –° IP-–ê–î–†–ï–°–û–ú:")
                            print("   –¢–æ–∫–µ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É IP-–∞–¥—Ä–µ—Å—É")
                            print("\nüí° –†–ï–®–ï–ù–ò–Ø:")
                            print("   1. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å —Ç–µ–∫—É—â–µ–≥–æ IP-–∞–¥—Ä–µ—Å–∞")
                            print("   2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN –¥–ª—è —Å–º–µ–Ω—ã IP")
                            print(
                                "   3. –ò–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —Å —Ç–æ–≥–æ IP, –≥–¥–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É"
                            )
                            print("\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ!")

                            if attempts < max_attempts:
                                print(f"\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ({attempts}/{max_attempts})")
                                print("   –ü–æ–ª—É—á–∏—Ç–µ –ù–û–í–´–ô —Ç–æ–∫–µ–Ω —Å —Ç–µ–∫—É—â–µ–≥–æ IP-–∞–¥—Ä–µ—Å–∞")
                            else:
                                print("\n‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
                                print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é")
                        else:
                            print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

                        if attempts >= max_attempts:
                            break
                else:
                    print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                    attempts += 1
            except KeyboardInterrupt:
                print("\nüõë –û—Ç–º–µ–Ω–∞...")
                return None
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                attempts += 1

        return None

    async def test_token_with_error_type(self, token: str) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏"""
        try:
            async with aiohttp.ClientSession() as session:
                params = {'access_token': token, 'v': '5.131'}
                async with session.get(
                    "https://api.vk.com/method/users.get", params=params
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        if 'error' in data:
                            error = data['error']
                            if error['error_code'] == 5 and error.get('error_subcode') == 1130:
                                return False, "ip_mismatch"
                            else:
                                print(f"‚ùå –û—à–∏–±–∫–∞ VK API: {error['error_msg']}")
                                return False, "api_error"
                        else:
                            user = data['response'][0]
                            print(
                                f"‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['first_name']} {user['last_name']}"
                            )
                            return True, "success"
                    else:
                        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status}")
                        return False, "http_error"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return False, "network_error"

    async def test_token(self, token: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        is_valid, _ = await self.test_token_with_error_type(token)
        return is_valid

    def save_token(self, token: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
        config_path = "config/vk_creds.json"
        os.makedirs(os.path.dirname(config_path), exist_ok=True)

        config = {"access_token": token}
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)

        print(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {config_path}")

    async def check_existing_token(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        config_path = "config/vk_creds.json"

        if not os.path.exists(config_path):
            return False

        try:
            with open(config_path, encoding='utf-8') as f:
                config = json.load(f)
                token = config.get('access_token')

            if not token:
                return False

            print(f"üîç –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω: {token[:20]}...")
            is_valid, error_type = await self.test_token_with_error_type(token)

            if is_valid:
                print("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!")
                return True
            else:
                if error_type == "ip_mismatch":
                    print("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É IP-–∞–¥—Ä–µ—Å—É")
                    print(
                        "üí° –†–µ—à–µ–Ω–∏–µ: –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —Å —Ç–æ–≥–æ –∂–µ IP, –≥–¥–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É"
                    )
                else:
                    print("‚ùå –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞: {e}")
            return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VK —Ç–æ–∫–µ–Ω–∞")
    print("=" * 50)

    client = VKTokenSetup()
    existing_valid = await client.check_existing_token()

    if existing_valid:
        print("\n‚úÖ –¢–æ–∫–µ–Ω —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("\nüìö –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print("1. –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏:")
        print("   uv run python main.py --upload --vk --recordings \"–Ω–∞–∑–≤–∞–Ω–∏–µ_–∑–∞–ø–∏—Å–∏\"")
        print("\n2. –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π:")
        print("   uv run python main.py --upload --vk --all")
        return

    token = await client.get_token_interactive()

    if token:
        print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìö –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print("1. –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏:")
        print("   uv run python main.py --upload --vk --recordings \"–Ω–∞–∑–≤–∞–Ω–∏–µ_–∑–∞–ø–∏—Å–∏\"")
        print("\n2. –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π:")
        print("   uv run python main.py --upload --vk --all")
    else:
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")


if __name__ == "__main__":
    asyncio.run(main())

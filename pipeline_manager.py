"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
"""

import asyncio
import os
from datetime import datetime, timedelta
from typing import Any

from rich.console import Console
from rich.progress import Progress, SpinnerColumn, TextColumn, TimeElapsedColumn

from config.unified_config import AppConfig, load_app_config
from database import DatabaseManager
from logger import get_logger
from models import MeetingRecording, PlatformStatus, ProcessingStatus
from utils import (
    filter_available_recordings,
    filter_recordings_by_date_range,
)
from utils.formatting import normalize_datetime_string
from utils.interactive_mapper import get_interactive_mapper
from utils.title_mapper import TitleMapper
from video_download_module import ZoomDownloader
from video_processing_module import ProcessingConfig, VideoProcessor
from video_upload_module import UploadManager

logger = get_logger()


class PipelineManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""

    def __init__(
        self,
        db_manager: DatabaseManager,
        app_config: AppConfig | None = None,
    ):
        self.db_manager = db_manager
        self.logger = get_logger()
        self.app_config = app_config or load_app_config()
        self.title_mapper = TitleMapper(self.app_config)
        self.interactive_mapper = get_interactive_mapper()
        self.console = Console(force_terminal=True, color_system="auto")

    async def list_recordings(
        self, from_date: str, to_date: str | None = None, status: ProcessingStatus | None = None
    ) -> list[MeetingRecording]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π"""
        if status:
            recordings = await self.db_manager.get_recordings(status=status)
        else:
            recordings = await self.db_manager.get_recordings()

        if from_date or to_date:
            recordings = filter_recordings_by_date_range(recordings, from_date, to_date)

        return recordings

    async def get_recordings_from_db(
        self, from_date: str, to_date: str | None = None
    ) -> list[MeetingRecording]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —Ç–æ–ª—å–∫–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Zoom API)"""
        all_recordings = await self.db_manager.get_recordings()

        if not all_recordings:
            self.logger.info("üìã –ó–∞–ø–∏—Å–∏ –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []

        filtered_recordings = filter_recordings_by_date_range(all_recordings, from_date, to_date)
        self.logger.info(
            f"üìã –ó–∞–ø–∏—Å–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥ {from_date} - {to_date or '—Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞'}: {len(filtered_recordings)}"
        )

        available_recordings = filter_available_recordings(filtered_recordings, min_size_mb=40)
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π (>30 –º–∏–Ω, >40 –ú–ë): {len(available_recordings)}")

        return available_recordings

    async def sync_recordings_to_db(self, recordings: list[MeetingRecording]) -> int:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if not recordings:
            return 0

        filtered_recordings = []
        filtered_count = 0

        for recording in recordings:
            if recording.duration < 30:
                filtered_count += 1
                self.logger.info(
                    f"‚è≠Ô∏è –ó–∞–ø–∏—Å—å '{recording.topic}' –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {recording.duration} –º–∏–Ω < 30 –º–∏–Ω)"
                )
                continue

            size_mb = recording.video_file_size / (1024 * 1024) if recording.video_file_size else 0
            if size_mb < 40:
                filtered_count += 1
                self.logger.info(
                    f"‚è≠Ô∏è –ó–∞–ø–∏—Å—å '{recording.topic}' –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—Ä–∞–∑–º–µ—Ä {size_mb:.1f} –ú–ë < 40 –ú–ë)"
                )
                continue

            filtered_recordings.append(recording)

        if filtered_count > 0:
            self.logger.info(f"üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {filtered_count}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
        for recording in filtered_recordings:
            self._check_and_set_mapping(recording)

        synced_count = await self.db_manager.save_recordings(filtered_recordings)
        self.logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {synced_count}")
        return synced_count

    async def reset_specific_recordings(self, recording_ids: list[int]) -> dict:
        """–°–±—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫ —Å—Ç–∞—Ç—É—Å—É INITIALIZED"""
        reset_count = 0
        total_deleted_files = 0

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        recordings = await self.db_manager.get_recordings_by_ids(recording_ids)
        recordings_by_id = {recording.db_id: recording for recording in recordings}

        for recording_id in recording_ids:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –∫—ç—à–∞
                recording = recordings_by_id.get(recording_id)
                if not recording:
                    self.logger.warning(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å {recording_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    continue

                # –£–¥–∞–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
                deleted_files = []
                if recording.local_video_path and os.path.exists(recording.local_video_path):
                    try:
                        os.remove(recording.local_video_path)
                        deleted_files.append(recording.local_video_path)
                        self.logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {recording.local_video_path}")
                    except Exception as e:
                        self.logger.warning(
                            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {recording.local_video_path}: {e}"
                        )

                if recording.processed_video_path and os.path.exists(
                    recording.processed_video_path
                ):
                    try:
                        os.remove(recording.processed_video_path)
                        deleted_files.append(recording.processed_video_path)
                        self.logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {recording.processed_video_path}")
                    except Exception as e:
                        self.logger.warning(
                            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {recording.processed_video_path}: {e}"
                        )

                # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∫ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
                # –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞–ø–ø–∏–Ω–≥, —Å—Ç–∞–≤–∏–º INITIALIZED, –∏–Ω–∞—á–µ SKIPPED
                if recording.is_mapped:
                    recording.status = ProcessingStatus.INITIALIZED
                else:
                    recording.status = ProcessingStatus.SKIPPED

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
                recording.local_video_path = None
                recording.processed_video_path = None
                recording.downloaded_at = None

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                recording.youtube_status = PlatformStatus.NOT_UPLOADED
                recording.vk_status = PlatformStatus.NOT_UPLOADED

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º URL –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
                recording.youtube_url = None
                recording.vk_url = None

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                recording.processing_notes = ""
                recording.processing_time = None

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
                recording.updated_at = datetime.now()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await self.db_manager.update_recording(recording)
                reset_count += 1
                total_deleted_files += len(deleted_files)

            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∑–∞–ø–∏—Å–∏ {recording_id}: {e}")

        return {
            'total_reset': reset_count,
            'by_status': {'INITIALIZED': reset_count},
            'deleted_files': total_deleted_files,
        }

    async def download_recordings(
        self,
        recordings: list[MeetingRecording],
        max_concurrent: int = 3,
        force_download: bool = False,
    ) -> int:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π"""
        if not recordings:
            return 0

        downloader = ZoomDownloader()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ)
        results = await downloader.download_multiple(recordings, max_concurrent, force_download)

        success_count = sum(results)
        self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {success_count}/{len(recordings)}")

        for recording, success in zip(recordings, results, strict=False):
            if success:
                await self.db_manager.update_recording(recording)

        return success_count

    async def process_recordings(self, recordings: list[MeetingRecording]) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π"""
        if not recordings:
            return 0

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ)
        success_count = 0
        for recording in recordings:
            if await self._process_single_recording(recording):
                success_count += 1

        self.logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {success_count}/{len(recordings)}")
        return success_count

    async def upload_recordings(
        self, recordings: list[MeetingRecording], platforms: list[str]
    ) -> tuple[int, list[MeetingRecording]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        if not recordings:
            return 0, []

        success_count = 0
        uploaded_recordings = []

        for recording in recordings:
            if await self._upload_single_recording(recording, platforms):
                success_count += 1
                uploaded_recordings.append(recording)

        return success_count, uploaded_recordings

    def display_uploaded_videos(self, uploaded_recordings: list[MeetingRecording]) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ —Å —Å—Å—ã–ª–∫–∞–º–∏"""
        if not uploaded_recordings:
            return

        self.console.print("\n[bold white]üìπ –ó–ê–ì–†–£–ñ–ï–ù–ù–´–ï –í–ò–î–ï–û:[/bold white]")
        self.console.print("[dim]" + "=" * 60 + "[/dim]")
        
        for i, recording in enumerate(uploaded_recordings, 1):
            if recording.youtube_url or recording.vk_url:
                self.console.print(
                    f"\n[bold cyan]{i}.[/bold cyan] [bold white]{recording.topic}[/bold white]"
                )

                if recording.youtube_url:
                    self.console.print(
                        f"    [bold red]üì∫ YouTube:[/bold red] [link={recording.youtube_url}]{recording.youtube_url}[/link]"
                    )

                if recording.vk_url:
                    self.console.print(
                        f"    [bold blue]üìò VK:[/bold blue] [link={recording.vk_url}]{recording.vk_url}[/link]"
                    )

    def _create_upload_config_from_app_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        from video_upload_module.config_factory import UploadConfigFactory

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        upload_config = UploadConfigFactory.from_app_config(self.app_config)
            
        return upload_config

    async def get_recordings_by_selection(
        self, select_all: bool, recordings: list[str], from_date: str, to_date: str | None = None
    ) -> list[MeetingRecording]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø–æ –≤—ã–±–æ—Ä—É"""
        all_recordings = await self.get_recordings_from_db(from_date, to_date)

        if select_all:
            return all_recordings

        if recordings:
            return [r for r in all_recordings if r.topic in recordings]

        return []

    async def get_recordings_by_numbers(
        self, recording_ids: list[int], from_date: str, to_date: str | None = None
    ) -> list[MeetingRecording]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø–æ –Ω–æ–º–µ—Ä–∞–º"""
        all_recordings = await self.get_recordings_from_db(from_date, to_date)

        target_recordings = []
        for recording in all_recordings:
            if recording.db_id in recording_ids:
                if (
                    recording.duration >= 30
                    and recording.video_file_size >= 30 * 1024 * 1024
                    and recording.status == ProcessingStatus.INITIALIZED
                ):
                    target_recordings.append(recording)

        return target_recordings

    async def get_all_zoom_recordings(
        self, configs: dict, from_date: str, to_date: str | None = None
    ) -> list[MeetingRecording]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ Zoom"""
        from api.zoom_api import ZoomAPI
        from utils import get_recordings_by_date_range

        all_recordings = []

        for account, config in configs.items():
            try:
                api = ZoomAPI(config)
                recordings = await get_recordings_by_date_range(
                    api, start_date=from_date, end_date=to_date, filter_video_only=False
                )
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –∫ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
                for recording in recordings:
                    recording.account = account
                all_recordings.extend(recordings)
                self.logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ {account}: {len(recordings)}")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ {account}: {e}")

        return all_recordings

    def _check_and_set_mapping(self, recording: MeetingRecording) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –∑–∞–ø–∏—Å–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏
            mapping_result = self.title_mapper.map_title(
                recording.topic, recording.start_time, recording.duration
            )

            if mapping_result.youtube_title:
                # –ï—Å—Ç—å –º–∞–ø–ø–∏–Ω–≥ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å INITIALIZED
                recording.is_mapped = True
                recording.status = ProcessingStatus.INITIALIZED
            else:
                # –ù–µ—Ç –º–∞–ø–ø–∏–Ω–≥–∞ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å SKIPPED
                recording.is_mapped = False
                recording.status = ProcessingStatus.SKIPPED

        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –º–∞–ø–ø–∏–Ω–≥–∞ –Ω–µ—Ç
            recording.is_mapped = False
            recording.status = ProcessingStatus.SKIPPED
            self.logger.warning(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è '{recording.topic}': {e}")

    def _format_duration(self, minutes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if minutes < 60:
            return f"{minutes}–º"
        else:
            hours = minutes // 60
            remaining_minutes = minutes % 60
            if remaining_minutes == 0:
                return f"{hours}—á"
            else:
                return f"{hours}—á {remaining_minutes}–º"

    async def run_full_pipeline(
        self,
        configs: dict,
        from_date: str,
        to_date: str | None,
        select_all: bool,
        recordings: list[str],
        platforms: list[str],
        allow_skipped: bool = False,
    ) -> dict:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        allowed_statuses = [ProcessingStatus.INITIALIZED]
        if allow_skipped:
            allowed_statuses.append(ProcessingStatus.SKIPPED)

        if select_all:
            all_recordings = await self.get_recordings_from_db(from_date, to_date)
            target_recordings = [r for r in all_recordings if r.status in allowed_statuses]
        elif recordings:
            all_recordings = await self.get_recordings_from_db(from_date, to_date)
            target_recordings = []

            # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ ID –∑–∞–ø–∏—Å–µ–π
            try:
                recording_ids = [int(r) for r in recordings]
                # –ò—â–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ ID
                for recording in all_recordings:
                    if recording.db_id in recording_ids and recording.status in allowed_statuses:
                        target_recordings.append(recording)
            except ValueError:
                # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
                target_recordings = [
                    r
                    for r in all_recordings
                    if r.topic in recordings and r.status in allowed_statuses
                ]
        else:
            target_recordings = []

        if not target_recordings:
            self.logger.warning("‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return {"success": False, "message": "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"}

        self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è {len(target_recordings)} –∑–∞–ø–∏—Å–µ–π")

        download_count = await self.download_recordings(target_recordings)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å–∫–∞—á–∞–Ω–Ω—ã–µ –∏–ª–∏ —É–∂–µ –∏–º–µ—é—â–∏–µ—Å—è)
        recordings_to_process = [r for r in target_recordings if r.status == ProcessingStatus.DOWNLOADED]
        if not recordings_to_process:
            return {
                "success": False, 
                "message": "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∏—á–µ–≥–æ –Ω–µ —Å–∫–∞—á–∞–Ω–æ)",
                "download_count": download_count,
                "process_count": 0,
                "upload_count": 0
            }

        process_count = await self.process_recordings(recordings_to_process)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ)
        recordings_to_upload = [r for r in target_recordings if r.status == ProcessingStatus.PROCESSED]
        upload_count = 0
        uploaded_recordings = []
        if recordings_to_upload:
            upload_count, uploaded_recordings = await self.upload_recordings(recordings_to_upload, platforms)

        return {
            "success": True,
            "download_count": download_count,
            "process_count": process_count,
            "upload_count": upload_count,
            "uploaded_recordings": uploaded_recordings,
        }

    async def _download_single_recording(self, recording: MeetingRecording) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
        downloader = ZoomDownloader()

        with Progress(
            SpinnerColumn(style="blue"),
            TextColumn("[bold blue]–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏[/bold blue]"),
            TimeElapsedColumn(),
            transient=False,
            console=self.console,
        ) as progress:
            task_id = progress.add_task("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ", total=None)

            success = await downloader.download_recording(recording, progress, task_id)

            if success:
                await self.db_manager.update_recording(recording)

            return success



    async def clean_old_recordings(self, days_ago: int = 7) -> dict[str, Any]:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ EXPIRED"""
        cutoff_date = datetime.now() - timedelta(days=days_ago)
        all_recordings = await self.db_manager.get_records_older_than(cutoff_date)

        if not all_recordings:
            self.logger.info("üìã –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return {'cleaned_count': 0, 'freed_space_mb': 0, 'cleaned_recordings': []}

        cleaned_count = 0
        freed_space_mb = 0
        cleaned_recordings = []

        for recording in all_recordings:
            file_deleted = False

            if recording.local_video_path and os.path.exists(recording.local_video_path):
                try:
                    file_size = os.path.getsize(recording.local_video_path) / (1024 * 1024)
                    os.remove(recording.local_video_path)
                    freed_space_mb += file_size
                    file_deleted = True
                    self.logger.info(
                        f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {recording.local_video_path} ({file_size:.1f} –ú–ë)"
                    )
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {recording.local_video_path}: {e}")

            if recording.processed_video_path and os.path.exists(recording.processed_video_path):
                try:
                    file_size = os.path.getsize(recording.processed_video_path) / (1024 * 1024)
                    os.remove(recording.processed_video_path)
                    freed_space_mb += file_size
                    file_deleted = True
                    self.logger.info(
                        f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {recording.processed_video_path} ({file_size:.1f} –ú–ë)"
                    )
                except Exception as e:
                    self.logger.error(
                        f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {recording.processed_video_path}: {e}"
                    )

            if file_deleted:
                recording.status = ProcessingStatus.EXPIRED
                recording.processing_notes = (
                    f"–û—á–∏—â–µ–Ω–æ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                )
                await self.db_manager.update_recording(recording)
                cleaned_count += 1
                cleaned_recordings.append(
                    {'id': recording.db_id, 'topic': recording.topic, 'deleted_files': []}
                )

        self.logger.info(
            f"‚úÖ –û—á–∏—â–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {cleaned_count}, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {freed_space_mb:.1f} –ú–ë"
        )
        return {
            'cleaned_count': cleaned_count,
            'freed_space_mb': freed_space_mb,
            'cleaned_recordings': cleaned_recordings,
        }


    async def sync_zoom_recordings(
        self, configs: dict, from_date: str, to_date: str | None = None
    ) -> int:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –∏–∑ Zoom API —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        from api import ZoomAPI
        from utils import get_recordings_by_date_range

        self.logger.info(
            f"üì• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –∏–∑ Zoom API –∑–∞ –ø–µ—Ä–∏–æ–¥ {from_date} - {to_date or '—Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞'}..."
        )
        all_recordings = []

        for account, config in configs.items():
            self.logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞: {account}")

            try:
                api = ZoomAPI(config)
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                recordings = await get_recordings_by_date_range(
                    api, start_date=from_date, end_date=to_date, filter_video_only=False
                )

                if recordings:
                    self.logger.info(f"   –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(recordings)}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –∫ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
                    for recording in recordings:
                        recording.account = account
                    all_recordings.extend(recordings)
                else:
                    self.logger.info("   –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            except Exception as e:
                self.logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∏–∑ {account}: {e}")
                continue

        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –ë–î (–≤–∫–ª—é—á–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é)
        if all_recordings:
            return await self.sync_recordings_to_db(all_recordings)
        else:
            self.logger.info("üìã –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return 0

    def display_recordings(self, recordings: list[MeetingRecording]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π"""
        if not recordings:
            self.console.print("\n[bold dark_red]üìã –î–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ[/bold dark_red]")
            self.console.print(
                "[dim]üí° –ö—Ä–∏—Ç–µ—Ä–∏–∏: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å >30 –º–∏–Ω, —Ä–∞–∑–º–µ—Ä >40 –ú–ë, –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ[/dim]"
            )
            return

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        self.console.print(f"\n[bold blue]üìã –î–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(recordings)}[/bold blue]")
        self.console.print("[dim]" + "=" * 80 + "[/dim]")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–∞–º
        from collections import defaultdict
        from datetime import datetime

        dates = defaultdict(list)
        for recording in recordings:
            if recording.start_time:
                try:
                    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ datetime –æ–±—ä–µ–∫—Ç
                    normalized_time = normalize_datetime_string(recording.start_time)
                    meeting_dt = datetime.fromisoformat(normalized_time)

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏) –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                    date_key = meeting_dt.date()
                    dates[date_key].append(recording)
                except ValueError:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
                    continue

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        sorted_dates = sorted(dates.keys(), reverse=False)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–∞–º
        for date_idx, date_key in enumerate(sorted_dates):
            date_recordings = dates[date_key]

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
            def get_start_time_for_sort(recording):
                try:
                    normalized_time = normalize_datetime_string(recording.start_time)
                    return datetime.fromisoformat(normalized_time)
                except ValueError:
                    return datetime.min  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —Å—Ç–∞–≤–∏–º –≤ –Ω–∞—á–∞–ª–æ

            date_recordings.sort(key=get_start_time_for_sort)

            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ)
            if date_idx > 0:
                self.console.print("")

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—Ç—ã
            date_str = date_key.strftime("%d.%m.%Y")
            self.console.print(
                f"\n[bold blue]üìÖ –î–ê–¢–ê:[/bold blue] [bold white]{date_str}[/bold white]"
            )
            self.console.print(
                f"[bold blue]üìä –ó–∞–ø–∏—Å–µ–π:[/bold blue] [bold white]{len(date_recordings)}[/bold white]"
            )
            self.console.print("[dim]" + "-" * 60 + "[/dim]")

            for recording in date_recordings:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ID –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                display_id = recording.db_id

                from utils import format_date, format_duration

                date_human = format_date(recording.start_time)
                dur_human = format_duration(recording.duration)

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ
                status_text = self._format_status(recording.status)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
                if recording.has_video():
                    size_str = f"{recording.video_file_size / (1024 * 1024):.1f} –ú–ë"

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                    title_with_link = f"[bold blue]{recording.topic}[/bold blue]"

                    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                    self.console.print(f"[bold blue][{display_id}][/bold blue] {title_with_link}")

                    # –î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ —Ü–≤–µ—Ç–∞–º–∏
                    self.console.print(
                        f"     üìÖ [white]{date_human}[/white] [dim]({dur_human})[/dim]"
                    )
                    self.console.print(f"     üíæ [white]{size_str}[/white]")
                    self.console.print(f"     üîê {recording.account or 'Unknown'}")
                    self.console.print(f"     {status_text}")
                else:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                    title_with_link = f"[bold blue]{recording.topic}[/bold blue]"

                    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                    self.console.print(f"[bold blue][{display_id}][/bold blue] {title_with_link}")

                    # –î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ —Ü–≤–µ—Ç–∞–º–∏
                    self.console.print(
                        f"     üìÖ [white]{date_human}[/white] [dim]({dur_human})[/dim]"
                    )
                    self.console.print("     [red]‚ùå –ù–µ—Ç –≤–∏–¥–µ–æ[/red]")
                    self.console.print(f"     üîê {recording.account or 'Unknown'}")
                    self.console.print(f"     {status_text}")

                # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏
                self.console.print("")

    def _format_status(self, status: ProcessingStatus) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        status_map = {
            ProcessingStatus.INITIALIZED: "[dim]‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ[/dim]",
            ProcessingStatus.DOWNLOADING: "[bold yellow]‚¨áÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...[/bold yellow]",
            ProcessingStatus.DOWNLOADED: "[bold green]‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ[/bold green]",
            ProcessingStatus.PROCESSING: "[bold yellow]‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...[/bold yellow]",
            ProcessingStatus.PROCESSED: "[bold green]üé¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ[/bold green]",
            ProcessingStatus.UPLOADING: "[bold yellow]‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã...[/bold yellow]",
            ProcessingStatus.UPLOADED: "[bold blue]üöÄ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã[/bold blue]",
            ProcessingStatus.FAILED: "[bold red]‚ùå –û—à–∏–±–∫–∞[/bold red]",
            ProcessingStatus.SKIPPED: "[white][dim]‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ[/dim][/white]",
            ProcessingStatus.EXPIRED: "[dim]üóëÔ∏è  –£—Å—Ç–∞—Ä–µ–ª–æ[/dim]",
        }
        return status_map.get(status, f"[dim]{status.value}[/dim]")

    async def _download_single_recording(self, recording: MeetingRecording) -> bool:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
        try:
            from rich.progress import (
                BarColumn,
                DownloadColumn,
                Progress,
                SpinnerColumn,
                TextColumn,
                TimeElapsedColumn,
                TransferSpeedColumn,
            )

            from video_download_module.downloader import ZoomDownloader

            downloader = ZoomDownloader()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤–æ –≤—Ä–µ–º—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            with Progress(
                SpinnerColumn(style="blue"),
                TextColumn("[bold blue]–°–∫–∞—á–∏–≤–∞–Ω–∏–µ"),
                "‚Ä¢",
                BarColumn(),
                DownloadColumn(),
                TransferSpeedColumn(),
                TimeElapsedColumn(),
                transient=False,
                console=self.console,
            ) as progress:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                try:
                    from datetime import datetime

                    from utils.formatting import normalize_datetime_string

                    normalized_time = normalize_datetime_string(recording.start_time)
                    meeting_dt = datetime.fromisoformat(normalized_time)
                    date_str = meeting_dt.strftime("%d.%m.%y")
                except Exception:
                    date_str = "??/??/??"

                title = f"{recording.topic[:45]}{'...' if len(recording.topic) > 45 else ''}"
                estimated_size = recording.video_file_size or (
                    200 * 1024 * 1024
                )  # 200 –ú–ë –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                task_id = progress.add_task(title, total=estimated_size, date=date_str)

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º download_recording —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
                success = await downloader.download_recording(
                    recording, progress, task_id, force_download=True
                )

            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ DOWNLOADED –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                recording.status = ProcessingStatus.DOWNLOADED
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å —Å –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É –≤ –ë–î
                await self.db_manager.update_recording(recording)
                self.logger.debug(f"–°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ {recording.topic} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ DOWNLOADED")
            else:
                recording.status = ProcessingStatus.FAILED
                await self.db_manager.update_recording(recording)
                self.logger.debug(f"–°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ {recording.topic} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ FAILED")

            return success
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ {recording.topic}: {e}")
            await self.db_manager.update_recording_status(
                recording.meeting_id, ProcessingStatus.FAILED
            )
            return False

    async def _process_single_recording(self, recording: MeetingRecording) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
        try:
            from rich.progress import (
                Progress,
                SpinnerColumn,
                TextColumn,
                TimeElapsedColumn,
            )

            from video_processing_module.video_processor import ProcessingConfig, VideoProcessor

            config = ProcessingConfig()
            processor = VideoProcessor(config)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            file_path = recording.local_video_path
            if not file_path:
                self.logger.error("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ —É–∫–∞–∑–∞–Ω")
                recording.status = ProcessingStatus.FAILED
                await self.db_manager.update_recording(recording)
                return False

            # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '/', —ç—Ç–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å, –∏–Ω–∞—á–µ - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π
            if not os.path.isabs(file_path):
                file_path = os.path.join(os.getcwd(), file_path)

            if not os.path.exists(file_path):
                self.logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                recording.status = ProcessingStatus.FAILED
                await self.db_manager.update_recording(recording)
                return False

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
            video_info = await processor.get_video_info(file_path)
            duration_minutes = video_info['duration'] / 60

            self.console.print(
                f"[dim]üìä –í–∏–¥–µ–æ: {duration_minutes:.1f} –º–∏–Ω, –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π –∑–≤—É–∫–∞[/dim]"
            )

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ —Å –∫—Ä—É—Ç—è—â–∏–º—Å—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
            with Progress(
                SpinnerColumn(style="yellow"),
                TextColumn("[bold yellow]–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ[/bold yellow]"),
                TimeElapsedColumn(),
                transient=False,
                console=self.console,
            ) as progress:
                progress.add_task("–û–±—Ä–∞–±–æ—Ç–∫–∞", total=None)

                try:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π –∑–≤—É–∫–∞)
                    process_task = asyncio.create_task(
                        processor.process_video_with_audio_detection(file_path, recording.topic)
                    )

                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                    success, processed_path = await process_task

                except asyncio.CancelledError:
                    self.console.print("\n[bold red]‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/bold red]")
                    recording.status = ProcessingStatus.FAILED
                    await self.db_manager.update_recording(recording)
                    return False
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")
                    recording.status = ProcessingStatus.FAILED
                    await self.db_manager.update_recording(recording)
                    return False

            if success and processed_path:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ PROCESSED –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                recording.status = ProcessingStatus.PROCESSED
                recording.processed_video_path = processed_path
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î
                await self.db_manager.update_recording(recording)
                self.logger.debug(f"–°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ {recording.topic} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ PROCESSED")
                self.console.print(
                    f"[bold green]‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: {processed_path}[/bold green]"
                )
            else:
                recording.status = ProcessingStatus.FAILED
                await self.db_manager.update_recording(recording)
                self.logger.debug(f"–°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ {recording.topic} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ FAILED")

            return success

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {recording.topic}: {e}")
            await self.db_manager.update_recording_status(
                recording.meeting_id, ProcessingStatus.FAILED
            )
            return False

    async def _upload_single_recording(
        self, recording: MeetingRecording, platforms: list[str]
    ) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å –∫—Ä—É—Ç—è—â–∏–º—Å—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º"""
        try:
            from rich.progress import Progress, SpinnerColumn, TextColumn, TimeElapsedColumn

            from video_upload_module.config_factory import UploadConfigFactory
            from video_upload_module.core.manager import UploadManager

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
            upload_config = UploadConfigFactory.from_app_config(self.app_config)
            upload_manager = UploadManager(upload_config)

            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
            auth_results = await upload_manager.authenticate_platforms(platforms)
            for platform, success in auth_results.items():
                if not success:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ {platform}")
                    return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –û–î–ò–ù –†–ê–ó (–¥–æ —Ü–∏–∫–ª–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º)
            mapping_result = None
            if recording.is_mapped:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞–ø–ø–∏–Ω–≥, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ
                mapping_result = self.title_mapper.map_title(
                    original_title=recording.topic,
                    start_time=recording.start_time,
                    duration=recording.duration,
                )

            # –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω —Ä–∞–∑
            common_metadata = {}
            if not recording.is_mapped or not mapping_result or not mapping_result.matched_rule:
                self.console.print(
                    f"\n[yellow]‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–æ –º–∞–ø–ø–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è '{recording.topic}'[/yellow]"
                )
                self.console.print("[cyan]üì§ –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏[/cyan]")
                common_metadata = self._get_common_metadata(recording)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ –∫–∞–∂–¥—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —Å –∫—Ä—É—Ç—è—â–∏–º—Å—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
            success_count = 0
            for platform in platforms:
                try:
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                    if (
                        not recording.is_mapped
                        or not mapping_result
                        or not mapping_result.matched_rule
                    ):
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ + —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                        title = common_metadata['title']
                        description = common_metadata.get('description', '')
                        thumbnail_path = common_metadata.get('thumbnail_path')
                        privacy_status = common_metadata.get('privacy_status', 'unlisted')

                        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                        platform_specific = self._get_platform_specific_metadata(
                            recording, platform
                        )

                        upload_kwargs = {'privacy_status': privacy_status}

                        if thumbnail_path:
                            upload_kwargs['thumbnail_path'] = thumbnail_path

                        if platform == 'youtube' and platform_specific.get('playlist_id'):
                            upload_kwargs['playlist_id'] = platform_specific['playlist_id']
                        elif platform == 'vk' and platform_specific.get('album_id'):
                            upload_kwargs['album_id'] = platform_specific['album_id']
                    else:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
                        title = mapping_result.youtube_title
                        description = mapping_result.description
                        thumbnail_path = mapping_result.thumbnail_path
                        playlist_id = (
                            mapping_result.youtube_playlist_id if platform == 'youtube' else None
                        )
                        album_id = mapping_result.vk_album_id if platform == 'vk' else None
                        privacy_status = 'unlisted'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é unlisted

                        upload_kwargs = {
                            'thumbnail_path': thumbnail_path,
                            'privacy_status': privacy_status,
                        }

                        if playlist_id:
                            upload_kwargs['playlist_id'] = playlist_id
                        if album_id:
                            upload_kwargs['album_id'] = album_id

                    # –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–æ —Å–ø–∏–Ω–Ω–µ—Ä–æ–º
                    with Progress(
                        SpinnerColumn(style="green"),
                        TextColumn(f"[bold green]–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ {platform.upper()}[/bold green]"),
                        TimeElapsedColumn(),
                        transient=False,
                        console=self.console,
                    ) as progress:
                        progress.add_task("–ó–∞–≥—Ä—É–∑–∫–∞", total=None)

                        result = await upload_manager.upload_to_platform(
                            platform=platform,
                            video_path=recording.processed_video_path,
                            title=title,
                            description=description,
                            **upload_kwargs,
                        )
                        if result and result.status == 'uploaded':
                            success_count += 1
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ URL –∑–∞–ø–∏—Å–∏
                            if platform == 'youtube':
                                recording.update_platform_status('youtube', PlatformStatus.UPLOADED_YOUTUBE, result.video_url)
                            elif platform == 'vk':
                                recording.update_platform_status('vk', PlatformStatus.UPLOADED_VK, result.video_url)
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                            await self.db_manager.update_recording(recording)

                except asyncio.CancelledError:
                    self.console.print(
                        f"\n[bold red]‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ {platform} –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/bold red]"
                    )
                    break
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ {platform}: {e}")

            return success_count > 0

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–∏ {recording.topic}: {e}")
            return False

    def _get_common_metadata(self, recording: MeetingRecording) -> dict[str, Any]:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –æ–±—â–∏—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
        metadata = {}

        print(f"\nüé¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–¥–µ–æ: {recording.topic}")
        print("=" * 60)

        # –ù–∞–∑–≤–∞–Ω–∏–µ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
        while True:
            title = input("üìù –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ").strip()
            if title:
                metadata['title'] = title
                break
            print("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")

        # –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
        description = input("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
        if description:
            metadata['description'] = description

        # –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
        thumbnail_path = input("üñºÔ∏è –ü—É—Ç—å –∫ –º–∏–Ω–∏–∞—Ç—é—Ä–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
        if thumbnail_path and os.path.exists(thumbnail_path):
            metadata['thumbnail_path'] = thumbnail_path
        elif thumbnail_path:
            print(f"‚ö†Ô∏è –§–∞–π–ª –º–∏–Ω–∏–∞—Ç—é—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: {thumbnail_path}")

        # –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é unlisted)
        privacy_options = ['public', 'unlisted', 'private']
        print(f"\nüîí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: {', '.join(privacy_options)}")
        privacy = input("üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: unlisted): ").strip().lower()
        if privacy in privacy_options:
            metadata['privacy_status'] = privacy
        else:
            metadata['privacy_status'] = 'unlisted'

        print("‚úÖ –û–±—â–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return metadata

    def _get_platform_specific_metadata(
        self, recording: MeetingRecording, platform: str
    ) -> dict[str, Any]:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        metadata = {}

        print(f"\nüì∫ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {platform.upper()}")
        print("=" * 60)

        # –ü–ª–µ–π–ª–∏—Å—Ç/–ê–ª—å–±–æ–º (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
        if platform == 'youtube':
            playlist_id = input(
                "üéµ ID –ø–ª–µ–π–ª–∏—Å—Ç–∞ YouTube (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): "
            ).strip()
            if playlist_id:
                metadata['playlist_id'] = playlist_id
        elif platform == 'vk':
            album_id = input("üìÅ ID –∞–ª—å–±–æ–º–∞ VK (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
            if album_id:
                metadata['album_id'] = album_id

        print(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è {platform.upper()} –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return metadata
